üìö Day 55 ‚úÖ - Learning Laravel with Docker üê≥

üì¶ What is Docker?
Docker is a containerization tool that packages your application and all its dependencies into a single container. It helps ensure consistency across different environments 
(development, testing, production) by creating a lightweight, portable container that behaves the same everywhere.

---

ü§î Why Use Docker Instead of XAMPP?

| XAMPP                     | Docker                             |
|---------------------------|------------------------------------|
| Only works locally        | Works locally & in production      |
| Manual setup              | Automated and reproducible         |
| One stack only            | Multiple versions/environments     |
| Slower performance        | Lightweight and isolated           |
| Difficult to scale        | Scalable and easier to deploy      |

---

‚úÖ Benefits of Using Docker for Laravel Projects:
- Consistency across development and production
- Quick onboarding for teams (just `docker-compose up`)
- Easily manage PHP, MySQL, Redis, Nginx versions
- Isolated and clean environment
- Easier CI/CD and deployment

---

‚öôÔ∏è Docker Installation Guide

    üîπ Step 1: Install Docker Desktop
        - Download from: https://www.docker.com/products/docker-desktop/
        - Follow the installation instructions for your OS (Windows, macOS, Linux)

    > Make sure virtualization is enabled in BIOS (for Windows)

    üîπ Step 2: Verify Installation
        ```bash
        docker --version
        docker compose version
        ```

---

üõ†Ô∏è Setting up Docker for Laravel

    1. Create Laravel Project
    ```bash
    laravel new laravel-docker-app
    cd laravel-docker-app
    ```

    2. Create Docker-Related Files

    üìù `Dockerfile`
    ```dockerfile
    FROM php:8.2-fpm

    RUN apt-get update && apt-get install -y \
        build-essential \
        libpng-dev \
        libjpeg-dev \
        libonig-dev \
        libxml2-dev \
        zip \
        unzip \
        curl \
        git \
        && docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd

    WORKDIR /var/www
    COPY . .

    RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

    CMD ["php-fpm"]
```

üìù `docker-compose.yml`
```yaml
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: laravel-app
    container_name: laravel-app
    volumes:
      - .:/var/www
    networks:
      - laravel

  web:
    image: nginx:alpine
    container_name: laravel-web
    ports:
      - 8000:80
    volumes:
      - .:/var/www
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - laravel

  db:
    image: mysql:5.7
    container_name: laravel-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: laravel
      MYSQL_USER: laravel
      MYSQL_PASSWORD: secret
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - laravel

volumes:
  dbdata:

networks:
  laravel:
```

üìù `nginx.conf`
```nginx
server {
    listen 80;
    index index.php index.html;
    root /var/www/public;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
    }

    location ~ /\.ht {
        deny all;
    }
}
```

---

‚ñ∂Ô∏è Running the Project

```bash
docker-compose up --build -d
```

Access your Laravel app at:
```
http://localhost:8000
```

---

‚úÖ Common Docker Commands for Laravel Dev

```bash
docker-compose up -d         # Start containers in background
docker-compose down          # Stop containers
docker-compose exec app bash # Enter Laravel app container
composer install              # Install dependencies
php artisan migrate           # Run migrations
```

---

üí° Tips for Using Docker with Laravel

- Use `.env` to configure DB_HOST as `db`
- Add Laravel aliases or helper shell scripts
- Use volume mounts for real-time file updates
- Backup database volumes regularly

---

üß† Conclusion

- Docker simplifies Laravel development by giving you a pre-configured, version-controlled environment that's consistent and scalable.
- Say goodbye to "it works on my machine" problems üöÄ
