
📚 Day 58 - Learning Laravel: Contact Book (CRUD)

1️⃣ Overview:
-> Built a simple Contact Book application using Laravel.
-> Enabled full CRUD (Create, Read, Update, Delete) functionality for contacts.
-> Styled all views using Blade templating and TailwindCSS.

2️⃣ Routes (web.php):
-> Used Laravel resource routing for the contact book.
   - GET /contacts            ➜ index (list all contacts)
   - GET /contacts/create     ➜ create (form to add new contact)
   - POST /contacts           ➜ store (save new contact)
   - GET /contacts/{id}       ➜ show (view a single contact - optional)
   - GET /contacts/{id}/edit  ➜ edit (form to update contact)
   - PUT /contacts/{id}       ➜ update (update contact)
   - DELETE /contacts/{id}    ➜ destroy (delete contact)

3️⃣ Controller (ContactController.php):
-> index():
   - Displays all contacts in a table format.
-> create():
   - Returns form to create new contact.
-> store():
   - Validates and stores new contact in database.
-> edit():
   - Returns form pre-filled with contact info for editing.
-> update():
   - Updates contact in the database.
-> destroy():
   - Deletes the contact.

4️⃣ Views (resources/views/contacts/*.blade.php):
-> Used Blade templating and TailwindCSS for responsive UI.

🔹 index.blade.php:
   - Displays all contacts in a clean table layout with Edit/Delete buttons.

🔹 create.blade.php:
   - Form to add a new contact with validation errors shown.

🔹 edit.blade.php:
   - Form to update existing contact data.

5️⃣ Model and Migration (Contact.php):
-> Created Contact model and migration using artisan command.
-> Migration fields: name, email, phone, address (all required).

6️⃣ Styling:
-> Used TailwindCSS for modern UI.
-> Added spacing, table styling, form fields, and button design.

7️⃣ Functionality Summary:
    ✅ ContactController with resource methods
    ✅ Resource Routes (CRUD)
    ✅ Blade Views (index, create, edit)
    ✅ Validation and Error Handling
    ✅ TailwindCSS UI Styling

🎯 Learnings:
-> Learned full CRUD operation in Laravel using Resource Routes
-> Understood Controller structure and blade templating flow
-> Practiced form validation and database interaction
-> Improved design with TailwindCSS for better UX
