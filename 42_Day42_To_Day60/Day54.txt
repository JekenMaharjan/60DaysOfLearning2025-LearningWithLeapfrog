📚 Day 54 - Learning Laravel: Full CRUD Post Application Using Resource Controller

1️⃣ Overview:
-> Created a fully functional CRUD system for "Post" model using Laravel.
-> Used `Route::resource('posts', PostController::class);` to handle all routes automatically.

2️⃣ Views Created:
-> index.blade.php  ➜ Displays all posts with Edit & Delete buttons
-> create.blade.php ➜ Form to create new post
-> edit.blade.php   ➜ Form to edit existing post

3️⃣ index.blade.php
-> Lists all posts using @foreach loop
-> Includes Edit (link) and Delete (form with @method('DELETE')) buttons
-> TailwindCSS used for layout, coloring, and spacing
-> Uses `@csrf` and confirms delete with `onclick="return confirm(...)"`

4️⃣ create.blade.php
-> Form for submitting a new post with fields: title and message
-> Uses POST method and `@csrf` directive
-> Includes validation error display using `$errors->any()`
-> Buttons: "Save" (submit), and "Check Posts" (link back to index)
-> TailwindCSS used for centering and styling form

5️⃣ edit.blade.php
-> Form pre-filled with existing post data using `old()` and `$post->...`
-> Uses PUT method via `@method('PUT')` and `@csrf`
-> Button styled using custom `.ubtn` class with Tailwind utilities

6️⃣ Security & Validation:
-> Used `@csrf` in all forms to protect against CSRF attacks
-> Used `@method('DELETE')` and `@method('PUT')` to spoof HTTP verbs not directly supported by HTML
-> Validation handled in controller via:
    $request->validate([
        'title' => 'required',
        'message' => 'required',
    ]);

7️⃣ Functionality Summary:
    ✅ View All Posts
    ✅ Create New Post
    ✅ Edit Existing Post
    ✅ Delete a Post
    ✅ Error handling and validation
    ✅ Fully styled with TailwindCSS

🎯 Learnings:
-> Mastered end-to-end CRUD operations using Laravel Resource Controllers
-> Improved UI with Tailwind for better UX
-> Practiced clean code, Blade templating, and Laravel security best practices
